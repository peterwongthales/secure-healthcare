swagger: "2.0"
info:
  description: "This is a API Server Backend for Secure Healthcare."
  version: "1.0.0"
  title: "Secure Healthcare"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "ssia@gemalto.com"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: "heroku-app.io"
basePath: "/v1"
schemes:
- "https"
- "http"
tags:
- name: "user"
  description: "Access or manage user information"
- name: "appointment"
  description: "Access or manage appointments"
- name: "policy"
  description: "Access or manage policies"
paths:
  /appointment:
    post:
      tags:
      - "appointment"
      summary: "Create a new appointment to the system"
      description: ""
      operationId: "addAppointment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The appointment object to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Appointment"
      responses:
        405:
          description: "Invalid input"
    put:
      tags:
      - "appointment"
      summary: "Update an existing appointment"
      description: ""
      operationId: "updateAppointment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The appointment object to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Appointment"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Appointment not found"
        405:
          description: "Validation exception"
  /appointment/{appointmentId}:
    get:
      tags:
      - "appointment"
      summary: "Find appointment by ID"
      description: "Returns a single appointment"
      operationId: "getAppointmentById"
      produces:
      - "application/json"
      parameters:
      - name: "appointmentId"
        in: "path"
        description: "ID of appointment to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Appointment"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Appointment not found"
    post:
      tags:
      - "appointment"
      summary: "Updates a appointment in the system with form data"
      description: ""
      operationId: "updateAppointmentWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "appointmentId"
        in: "path"
        description: "ID of appointment that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the appointment"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the appointment"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
    delete:
      tags:
      - "appointment"
      summary: "Deletes a appointment"
      description: ""
      operationId: "deleteAppointment"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "appointmentId"
        in: "path"
        description: "Appointment id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Appointment not found"
  /system/inventory:
    get:
      tags:
      - "system"
      summary: "Returns appointment inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      appointmentId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Appointment:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "appointment status in the system"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Appointment"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
