swagger: "2.0"

info:
  description: "This is a API Server Backend for Secure Healthcare"
  version: "1.0.0"
  title: "Secure Healthcare"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "ssia@gemalto.com"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"

host: "localhost:3000"
basePath: "/v1"

schemes:
- "https"
- "http"

tags:
  - name: user
    description: Operations on users
  - name: appointment
    description: Access or manage appointments
  - name: policy
    description: Everything about policies

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        description: "The user's username"
      password:
        type: "string"
        description: "The user's password"
      firstName:
        type: "string"
        description: "The user's first name"
      lastName:
        type: "string"
        description: "The user's last name"
      email:
        type: "string"
        description: "The user's email address"
      phone:
        type: "string"
        description: "The user's contact number"
      photoUrl:
        type: "string"
        description: "The user's profile photo url"
      userType:
        type: "string"
        description: "The user type"
        enum:
          - "patient"
          - "doctor"
          - "agent"
          - "approver"

  Policy:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        description: "The agent's username"
      password:
        type: "string"
        description: "The agent's password"  
      patientId:
        type: "integer"
        format: "int64"
        description: "The policy's patient id"
      approverId:
        type: "integer"
        format: "int64"
        description: "The policy's insurance company id"

  Appointment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        description: "The doctor's username"
      password:
        type: "string"
        description: "The doctor's password"  
      policyId:
        type: "integer"
        format: "int64"
        description: "The appointment's policy id"
      diagnosis:
        type: "string"
        description: "The doctor diagnosis for patient"
      date:
        type: "string"
        description: "The appointment's date and time"
      location:
        type: "string"
        description: "The appointment's location"
      state:
        type: "string"
        description: "The appoinment's state"
        enum:
          - "created"
          - "submitted"
          - "approved"

paths:
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "Create a user in the system"
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "Successful operation"
  /user/login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: "Logs the user in to the system"
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The username for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid username/password"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user"
      description: "Logs the user out of the system"
      operationId: "logoutUser"
      produces:
        - "application/json"
      parameters: []
      responses:
        default:
          description: "Successful operation"
  /user/{username}:
    get:
      tags:
        - "user"
      summary: "Get user by username"
      description: "Returns the user that matched the username"
      operationId: "getUserByName"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The user that needs to be fetched. use 'jdoe' for testing"
          required: true
          type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
        - "user"
      summary: "Updates user"
      description: "Updates the user information"
      operationId: "updateUser"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "Username that needs to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "Deletes a user. You can delete any user except the system default(admin) and test(jdoe) user"
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"

  /policy:
    post:
      tags:
        - "policy"
      summary: "Create policy"
      description: "Create a policy in the system"
      operationId: "createPolicy"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created policy object"
          required: true
          schema:
            $ref: "#/definitions/Policy"
      responses:
        default:
          description: "Successful operation"

  /policy/user/{username}:
    get:
      tags:
        - "policy"
      summary: "Get policy by username"
      description: "Return all policies belong to user if user is patient or return all policies created by agent if user is agent. Invalid for doctor"
      operationId: "getPoliciesByUsername"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The username on which the policies needs to be fetched. use 'jdoe' for testing"
          required: true
          type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Policy"
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"

  /policy/{id}:
    delete:
      tags:
        - "policy"
      summary: "Delete policy"
      description: "Deletes a policy"
      operationId: "deletePolicy"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "The id that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "Id not found"

  /appointment:
    get:
      tags:
        - "appointment"
      summary: "Returns all appointments"
      operationId: "getAppointments"
      produces:
        - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Appointment"
    post:
      tags:
        - "appointment"
      summary: "Create appointment"
      description: "Create an appointment in the system"
      operationId: "createAppointment"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created appointment object"
          required: true
          schema:
            $ref: "#/definitions/Appointment"
      responses:
        default:
          description: "Successful operation"

  /appointment/user/{username}:
    get:
      tags:
        - "appointment"
      summary: "Get appointments by username"
      description: "Return all policies related to username." 
      operationId: "getAppointmentsByUsername"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The username on which the appointment needs to be fetched. use 'jdoe' for testing"
          required: true
          type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Appointment"
        404:
          description: "User not found"

  /appointment/{id}:
    put:
      tags:
        - "appointment"
      summary: "Update appointment state"
      description: "Update appointment state. A user with type patient is allowed to update appointment state from 'created' to 'submitted'. A user with type approver is allowed to update appointment state from 'submitted' to 'approved'."
      operationId: "updateAppointmentState"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "The id that needs to be deleted"
          required: true
          type: "string"
        - name: "username"
          in: "query"
          description: "The username that want to update"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The username's password"
          required: true
          type: "string"
        - name: "appointmentState"
          in: "query"
          description: "The appointment's state"
          required: true
          type: "string"
          enum:
            - "created"
            - "submitted"
            - "approved"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "Id not found"
    delete:
      tags:
        - "appointment"
      summary: "Delete appointment"
      description: "Deletes a appointment"
      operationId: "deleteAppointment"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "The id that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "Id not found"
